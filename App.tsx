
import React, { useState, useCallback } from 'react';
import GameScreen from './components/GameScreen';
import Controls from './components/Controls';
import * as geminiService from './services/geminiService';
import type { GameState, LoadingState } from './types';

const App: React.FC = () => {
  const [gameState, setGameState] = useState<GameState | null>(null);
  const [imageUrl, setImageUrl] = useState<string | null>(null);
  const [loading, setLoading] = useState<LoadingState>({ story: false, image: false });

  const processStoryUpdate = useCallback(async (prompt: string, isNewGame: boolean) => {
    setLoading({ story: true, image: true });
    if (isNewGame) {
      setGameState(null);
      setImageUrl(null);
    }

    const storyUpdate = await geminiService.generateStoryUpdate(prompt);
    
    setGameState(storyUpdate);
    setLoading(prev => ({ ...prev, story: false }));

    if (storyUpdate.imagePrompt) {
        const newImageUrl = await geminiService.generateImage(storyUpdate.imagePrompt);
        setImageUrl(newImageUrl);
    }
    
    setLoading({ story: false, image: false });
  }, []);

  const handleNewGame = useCallback((theme: string) => {
    const prompt = `Start a new text adventure game with this theme: "${theme}".`;
    processStoryUpdate(prompt, true);
  }, [processStoryUpdate]);
  
  const handleSelectChoice = useCallback((choice: string) => {
    if (!gameState || loading.story) return;

    // To provide context, we send the last scene and the player's choice.
    const prompt = `The story so far: "${gameState.sceneDescription}". The player's choice is: "${choice}". Continue the adventure based on this choice.`;
    processStoryUpdate(prompt, false);
  }, [gameState, loading.story, processStoryUpdate]);

  return (
    <div className="min-h-screen bg-gray-900 text-white p-4 sm:p-6 lg:p-8">
      <main className="max-w-7xl mx-auto">
        <header className="text-center mb-8">
          <h1 className="text-4xl sm:text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 to-amber-400">
            Gemini Adventure
          </h1>
          <p className="text-gray-400 mt-2">Your story, generated by AI.</p>
        </header>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2 bg-gray-800 p-6 rounded-lg shadow-lg">
             <GameScreen 
                imageUrl={imageUrl} 
                sceneDescription={gameState?.sceneDescription || null} 
                loading={loading.story || loading.image}
              />
          </div>
          <div className="lg:col-span-1">
            <Controls 
              choices={gameState?.choices || null}
              isGameOver={gameState?.isGameOver || false}
              reason={gameState?.reason || null}
              loading={loading.story || loading.image}
              onSelectChoice={handleSelectChoice}
              onNewGame={handleNewGame}
            />
          </div>
        </div>
      </main>
      <footer className="text-center mt-12 text-gray-500 text-sm">
        <p>Powered by Google Gemini and Imagen. Story and images are AI-generated and may be unpredictable.</p>
      </footer>
    </div>
  );
};

export default App;
